#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('crowdSketch:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
    var lobby = require('../routes/Lobby');
    var firstLobby = lobby("Lobby0");
var x = 0;
var rooms = [firstLobby];
var io = require('socket.io').listen(server.listen(port));

io.on('connection', function(socket) {
  console.log("Connected " + (x++) + " times");
  var openLobby = null;
  for (var i = 0; i < rooms.length; i++) {
    if (rooms[i].getCount() < 3) {
      openLobby = rooms[i];

      console.log(rooms[i].getName() + " is Available");
      break;
    }
  }
  if (openLobby == null) {
    var nextlobby = lobby("Lobby" + rooms.length);
    console.log("No open lobby");
    rooms.push(nextlobby);
    openLobby = nextlobby;
  }


  openLobby.counterIncrement();
  socket.room = openLobby.getName();
  socket.join(openLobby.getName());

  socket.on('disconnect', function () {
    console.log("Disconnecting");
    if (openLobby != null) {
      openLobby.counterDecrement();
      if (openLobby.getCount() == 0) {
        delete rooms[openLobby];
      }
      socket.leave(socket.room);
    }
  });
  socket.on('chat message', function (msg) {
//   io.emit('chat message', msg);
    console.log("Sending chat message");
    io.to(socket.room).emit('chat message', msg);
  });
  // socket.on('data points', function(data){
  //   console.log('DATA: ' + data[0].x);
  //   io.emit('data points',data);
  // })
  socket.on('data point', function(data){
    //console.log('DATA: ' + data[0].x);
    io.emit('data point', data);
  })
});



server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
